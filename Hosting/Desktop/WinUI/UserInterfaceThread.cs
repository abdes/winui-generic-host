// Distributed under the MIT License. See accompanying file LICENSE or copy
// at https://opensource.org/licenses/MIT).
// SPDX-License-Identifier: MIT

namespace HappyCoding.Hosting.Desktop.WinUI;

using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Logging.Abstractions;
using Microsoft.UI.Dispatching;
using Microsoft.UI.Xaml;
using WinRT;

/// <summary>
/// Implementation for a WinUI based User Interface thread. This is basically a
/// drop-in replacement for the bootstrap code auto-generated by the WinUI XAML
/// in the `Main` entry point.
/// </summary>
/// <remarks>
/// Initializes a new instance of the <see cref="UserInterfaceThread"/> class.
/// </remarks>
/// <param name="serviceProvider">The Dependency Injector's <see
/// cref="IServiceProvider"/>.</param>
/// <param name="lifetime">The hosted application's lifetime used to coordinate
/// the UI lifecycle with the application's lifecycle.</param>
/// <param name="context">The hosting context, which should have been already
/// provisioned in the Dependency Injector.</param>
/// <param name="loggerFactory">Used to obtain a logger to be used by the User
/// Interface thread.</param>
public class UserInterfaceThread(
    IServiceProvider serviceProvider,
    IHostApplicationLifetime lifetime,
    HostingContext context,
    ILoggerFactory loggerFactory)
    : BaseUserInterfaceThread<HostingContext>(
        lifetime,
        context,
        loggerFactory?.CreateLogger<UserInterfaceThread>() ?? NullLoggerFactory.Instance.CreateLogger<UserInterfaceThread>())
{
    private readonly IServiceProvider serviceProvider = serviceProvider;

    /// <inheritdoc />
    protected override void PreUiThreadStart() =>
        ComWrappersSupport.InitializeComWrappers();

    /// <inheritdoc />
    protected override void UiThreadStart()
    {
        Application.Start(_ =>
        {
            this.HostingContext.Dispatcher = DispatcherQueue.GetForCurrentThread();
            DispatcherQueueSynchronizationContext context = new(this.HostingContext.Dispatcher);
            SynchronizationContext.SetSynchronizationContext(context);

            this.HostingContext.Application = this.serviceProvider.GetRequiredService<Application>();

            /*
             * TODO: here we can add code that initializes the UI before the
             * main window is created and activated For example: unhandled
             * exception handlers, maybe instancing, activation, etc...
             * */

            // First window creation is to be handled in Application.OnLaunched()
        });
        this.OnUserInterfaceThreadCompletion();
    }
}
